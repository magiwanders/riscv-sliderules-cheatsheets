import { immediates } from "./immediates.mjs";

export const instructions = {
  add: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 + rs2",
    description: "Addition",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sub: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 - rs2",
    description: "Subtraction",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      funct7: { value: 0b0100000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  xor: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 ^ rs2",
    description: "Bitwise XOR",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b100, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  slt: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = { 31'b0, ( rs1[31] == rs2[31] ) ? (rs1<rs2) : (rs1[31])}",
    description: "Set Less Than",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  or: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 | rs2",
    description: "Bitwise OR",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b110, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sll: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 <<(zero extends) rs2",
    description: "Shift Left Logical",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  srl: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 (zero extends)>> rs2",
    description: "Shift Right Logical",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sra: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 (msb extends)>> rs2",
    description: "Shift Right Arithmetic",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0100000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sltu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = { 31'b0, rs1 < rs2 }",
    description: "Set Less Than Unsigned",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  and: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 & rs2",
    description: "Bitwise AND",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b111, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  addi: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = rs1 + imm",
    description: "Add Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  slti: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = (rs1 < imm) ? 1 : 0",
    description: "Set Less Than Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  sltiu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = (rs1 < imm) ? 1 : 0",
    description: "Set Less Than Immediate Unsigned",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  xori: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = rs1 ^ imm",
    description: "Bitwise XOR Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b100, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  ori: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = rs1 | imm",
    description: "Bitwise OR Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b110, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  andi: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = rs1 & imm",
    description: "Bitwise AND Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b111, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  lb: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Byte",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  lh: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Halfword",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  lw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Word",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  lbu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Byte Unsigned",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b100, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  lhu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Halfword Unsigned",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  jalr: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = PC + 4; PC = (rs1 + imm) & ~1",
    description: "Jump and Link Register",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1100111, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      imm: immediates.I,
      rd: { mask: 0b11111 << 7 },
    },
  },
  lui: {
    ISA: "RV",
    assembly: ["rd", "imm"],
    pseudocode: "rd = imm << 12",
    description: "Load Upper Immediate",
    type: "U",
    arch_width: [32, 64],
    extension: "U",
    fields: {
      opcode: { value: 0b0110111, mask: 0b1111111 },
      rd: { mask: 0b11111 << 7 },
      imm: immediates.U,
    },
  },
  auipc: {
    ISA: "RV",
    assembly: ["rd", "imm"],
    pseudocode: "rd = PC + imm",
    description: "Add Upper Immediate to PC",
    type: "U",
    arch_width: [32, 64],
    extension: "U",
    fields: {
      opcode: { value: 0b0010111, mask: 0b1111111 },
      rd: { mask: 0b11111 << 7 },
      imm: immediates.U,
    },
  },
  jal: {
    ISA: "RV",
    assembly: ["rd", "imm"],
    pseudocode: "rd = PC + 4; PC = PC + imm",
    description: "Jump and Link",
    type: "J",
    arch_width: [32, 64],
    extension: "J",
    fields: {
      opcode: { value: 0b1101111, mask: 0b1111111 },
      rd: { mask: 0b11111 << 7 },
      imm: immediates.J,
    },
  },
  beq: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 == rs2) PC = PC + imm",
    description: "Branch Equal",
    type: "B",
    arch_width: [32, 64],
    extension: "B",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      imm: immediates.B,
    },
  },
  bne: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 != rs2) PC = PC + imm",
    description: "Branch Not Equal",
    type: "B",
    arch_width: [32, 64],
    extension: "B",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      imm: immediates.B,
    },
  },
  blt: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 < rs2) PC = PC + imm",
    description: "Branch Less Than",
    type: "B",
    arch_width: [32, 64],
    extension: "B",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b100, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      imm: immediates.B,
    },
  },
  bge: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 >= rs2) PC = PC + imm",
    description: "Branch Greater Than or Equal",
    type: "B",
    arch_width: [32, 64],
    extension: "B",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      imm: immediates.B,
    },
  },
  bltu: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 < rs2) PC = PC + imm",
    description: "Branch Less Than Unsigned",
    type: "B",
    arch_width: [32, 64],
    extension: "B",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b110, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      imm: immediates.B,
    },
  },
  bgeu: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 >= rs2) PC = PC + imm",
    description: "Branch Greater Than or Equal Unsigned",
    type: "B",
    arch_width: [32, 64],
    extension: "B",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b111, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      imm: immediates.B,
    },
  },
  sb: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "Memory[rs1 + imm] = rs2[0:7]",
    description: "Store Byte",
    type: "S",
    arch_width: [32, 64],
    extension: "S",
    fields: {
      opcode: { value: 0b0100011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      imm: immediates.S,
    },
  },
  sh: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "Memory[rs1 + imm] = rs2[0:15]",
    description: "Store Halfword",
    type: "S",
    arch_width: [32, 64],
    extension: "S",
    fields: {
      opcode: { value: 0b0100011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      imm: immediates.S,
    },
  },
  sw: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "Memory[rs1 + imm] = rs2",
    description: "Store Word",
    type: "S",
    arch_width: [32, 64],
    extension: "S",
    fields: {
      opcode: { value: 0b0100011, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      imm: immediates.S,
    },
  },
  slli: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 << shamt",
    description: "Shift Left Logical Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  srli: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 >>> shamt",
    description: "Shift Right Logical Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  srai: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 >> shamt",
    description: "Shift Right Arithmetic Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0100000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  fence: {
    ISA: "RV",
    assembly: ["pred", "succ"],
    pseudocode: "Fence(pred, succ)",
    description: "Synchronize",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0001111, mask: 0b1111111 },
      rd: { mask: 0b11111 << 7 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      succ: { mask: 0b1111 << 20 },
      pred: { mask: 0b1111 << 24 },
      fm: { mask: 0b1111 << 28 },
    },
  },
  ecall: {
    ISA: "RV",
    assembly: ["ecall"],
    pseudocode: "ECALL",
    description: "Environment Call",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1110011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rd: { value: 0b00000, mask: 0b11111 << 7 },
      rs1: { value: 0b00000, mask: 0b11111 << 15 },
      funct12: { value: 0b000000000000, mask: 0b111111111111 << 20 },
    },
  },
  ebreak: {
    ISA: "RV",
    assembly: ["ebreak"],
    pseudocode: "EBREAK",
    description: "Environment Breakpoint",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1110011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rd: { value: 0b00000, mask: 0b11111 << 7 },
      rs1: { value: 0b00000, mask: 0b11111 << 15 },
      funct12: { value: 0b000000000001, mask: 0b111111111111 << 20 },
    },
  },
};
