import { immediates } from "./immediates.mjs";

export const instructions = {
  // RV32I Base Instruction Set
  add: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 + rs2",
    description: "Addition",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sub: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 - rs2",
    description: "Subtraction",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      funct7: { value: 0b0100000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  xor: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 ^ rs2",
    description: "Bitwise XOR",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b100, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  slt: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = { 31'b0, ( rs1[31] == rs2[31] ) ? (rs1<rs2) : (rs1[31])}",
    description: "Set Less Than",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  or: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 | rs2",
    description: "Bitwise OR",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b110, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sll: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 <<(zero extends) rs2",
    description: "Shift Left Logical",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  srl: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 (zero extends)>> rs2",
    description: "Shift Right Logical",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sra: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 (msb extends)>> rs2",
    description: "Shift Right Arithmetic",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0100000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sltu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = { 31'b0, rs1 < rs2 }",
    description: "Set Less Than Unsigned",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  and: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 & rs2",
    description: "Bitwise AND",
    type: "R",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b111, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  addi: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = rs1 + imm",
    description: "Add Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  slti: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = (rs1 < imm) ? 1 : 0",
    description: "Set Less Than Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sltiu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = (rs1 < imm) ? 1 : 0",
    description: "Set Less Than Immediate Unsigned",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  xori: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = rs1 ^ imm",
    description: "Bitwise XOR Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b100, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  ori: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = rs1 | imm",
    description: "Bitwise OR Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b110, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  andi: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = rs1 & imm",
    description: "Bitwise AND Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b111, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  lb: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Byte",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  lh: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Halfword",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  lw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Word",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  lbu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Byte Unsigned",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b100, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  lhu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Halfword Unsigned",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  jalr: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = PC + 4; PC = (rs1 + imm) & ~1",
    description: "Jump and Link Register",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1100111, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  lui: {
    ISA: "RV",
    assembly: ["rd", "imm"],
    pseudocode: "rd = imm << 12",
    description: "Load Upper Immediate",
    type: "U",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0110111, mask: 0b1111111 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  auipc: {
    ISA: "RV",
    assembly: ["rd", "imm"],
    pseudocode: "rd = PC + imm",
    description: "Add Upper Immediate to PC",
    type: "U",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010111, mask: 0b1111111 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  jal: {
    ISA: "RV",
    assembly: ["rd", "imm"],
    pseudocode: "rd = PC + 4; PC = PC + imm",
    description: "Jump and Link",
    type: "J",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1101111, mask: 0b1111111 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  beq: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 == rs2) PC = PC + imm",
    description: "Branch Equal",
    type: "B",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
    },
  },
  bne: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 != rs2) PC = PC + imm",
    description: "Branch Not Equal",
    type: "B",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
    },
  },
  blt: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 < rs2) PC = PC + imm",
    description: "Branch Less Than",
    type: "B",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b100, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
    },
  },
  bge: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 >= rs2) PC = PC + imm",
    description: "Branch Greater Than or Equal",
    type: "B",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
    },
  },
  bltu: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 < rs2) PC = PC + imm",
    description: "Branch Less Than Unsigned",
    type: "B",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b110, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
    },
  },
  bgeu: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "if(rs1 >= rs2) PC = PC + imm",
    description: "Branch Greater Than or Equal Unsigned",
    type: "B",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1100011, mask: 0b1111111 },
      funct3: { value: 0b111, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
    },
  },
  sb: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "Memory[rs1 + imm] = rs2[0:7]",
    description: "Store Byte",
    type: "S",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0100011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
    },
  },
  sh: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "Memory[rs1 + imm] = rs2[0:15]",
    description: "Store Halfword",
    type: "S",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0100011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
    },
  },
  sw: {
    ISA: "RV",
    assembly: ["rs1", "rs2", "imm"],
    pseudocode: "Memory[rs1 + imm] = rs2",
    description: "Store Word",
    type: "S",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0100011, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
    },
  },
  slli: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 << shamt",
    description: "Shift Left Logical Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  srli: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 >>> shamt",
    description: "Shift Right Logical Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  srai: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 >> shamt",
    description: "Shift Right Arithmetic Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0100000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  fence: {
    ISA: "RV",
    assembly: ["pred", "succ"],
    pseudocode: "Fence(pred, succ)",
    description: "Synchronize",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b0001111, mask: 0b1111111 },
      rd: { mask: 0b11111 << 7 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      succ: { mask: 0b1111 << 20 },
      pred: { mask: 0b1111 << 24 },
      fm: { mask: 0b1111 << 28 },
    },
  },
  ecall: {
    ISA: "RV",
    assembly: ["ecall"],
    pseudocode: "ECALL",
    description: "Environment Call",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1110011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rd: { value: 0b00000, mask: 0b11111 << 7 },
      rs1: { value: 0b00000, mask: 0b11111 << 15 },
      funct12: { value: 0b000000000000, mask: 0b111111111111 << 20 },
    },
  },
  ebreak: {
    ISA: "RV",
    assembly: ["ebreak"],
    pseudocode: "EBREAK",
    description: "Environment Breakpoint",
    type: "I",
    arch_width: [32, 64],
    extension: "I",
    fields: {
      opcode: { value: 0b1110011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rd: { value: 0b00000, mask: 0b11111 << 7 },
      rs1: { value: 0b00000, mask: 0b11111 << 15 },
      funct12: { value: 0b000000000001, mask: 0b111111111111 << 20 },
    },
  },
  // RV64I Base Instruction Set (in addition to RV32I)
  lwu: {
    ISA: "RV",
    assembly: ["rd", "imm(rs1)"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Word Unsigned",
    type: "I",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b110, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  ld: {
    ISA: "RV",
    assembly: ["rd", "imm(rs1)"],
    pseudocode: "rd = M[rs1 + imm]",
    description: "Load Doubleword",
    type: "I",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0000011, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sd: {
    ISA: "RV",
    assembly: ["rs2", "imm(rs1)"],
    pseudocode: "M[rs1 + imm] = rs2",
    description: "Store Doubleword",
    type: "S",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0100011, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
    },
  },
  slli64: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 << shamt",
    description: "Shift Left Logical Immediate (64-bit)",
    type: "I",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      imm: { value: 0b00000, mask: 0b1111111 << 26 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b111111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  srli64: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 >> shamt (logical)",
    description: "Shift Right Logical Immediate (64-bit)",
    type: "I",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      imm: { value: 0b00000, mask: 0b1111111 << 26 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b111111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  srai64: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 >> shamt (arithmetic)",
    description: "Shift Right Arithmetic Immediate (64-bit)",
    type: "I",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0010011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      imm: { value: 0b010000, mask: 0b1111111 << 26 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b111111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  addiw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "imm"],
    pseudocode: "rd = rs1 + imm (signed immediate)",
    description: "Add Immediate (64-bit)",
    type: "I",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0011011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  slliw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 << shamt (64-bit)",
    description: "Shift Left Logical Immediate (64-bit)",
    type: "I",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0011011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  srliw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 >> shamt (logical, 64-bit)",
    description: "Shift Right Logical Immediate (64-bit)",
    type: "I",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0011011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sraiw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "shamt"],
    pseudocode: "rd = rs1 >> shamt (arithmetic, 64-bit)",
    description: "Shift Right Arithmetic Immediate (64-bit)",
    type: "I",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0011011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b101 << 12 },
      funct7: { value: 0b0100000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      shamt: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  addw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 + rs2 (64-bit)",
    description: "Add (64-bit)",
    type: "R",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0111011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  subw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 - rs2 (64-bit)",
    description: "Subtract (64-bit)",
    type: "R",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0111011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      funct7: { value: 0b0100000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sllw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 << rs2 (64-bit)",
    description: "Shift Left Logical (64-bit)",
    type: "R",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0111011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  srlw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 >> rs2 (logical, 64-bit)",
    description: "Shift Right Logical (64-bit)",
    type: "R",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0111011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0000000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sraw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 >> rs2 (arithmetic, 64-bit)",
    description: "Shift Right Arithmetic (64-bit)",
    type: "R",
    arch_width: [64],
    extension: "I",
    fields: {
      opcode: { value: 0b0111011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b101 << 12 },
      funct7: { value: 0b0100000, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  // RV32/RV64 Zifencei Standard Extension
  fence_i: {
    ISA: "RV",
    assembly: ["imm", "rs1"],
    pseudocode: "fence",
    description: "Fence for instruction stream",
    type: "I",
    arch_width: [32, 64],
    extension: "Zifencei",
    fields: {
      opcode: { value: 0b0001111, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  // RV32/RV64 Zicsr Standard Extension
  csrrw: {
    ISA: "RV",
    assembly: ["csr", "rd", "rs1"],
    pseudocode: "rd = CSRs[csr]; CSRs[csr] = rs1",
    description: "Atomic Read and Write of CSR",
    type: "I",
    arch_width: [32, 64],
    extension: "Zicsr",
    fields: {
      opcode: { value: 0b1110011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      csr: { mask: 0b111111111111 << 20 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  csrrs: {
    ISA: "RV",
    assembly: ["csr", "rd", "rs1"],
    pseudocode: "rd = CSRs[csr]; CSRs[csr] = CSRs[csr] | rs1",
    description: "Atomic Read and Set of CSR Bits",
    type: "I",
    arch_width: [32, 64],
    extension: "Zicsr",
    fields: {
      opcode: { value: 0b1110011, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      csr: { mask: 0b111111111111 << 20 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  csrrc: {
    ISA: "RV",
    assembly: ["csr", "rd", "rs1"],
    pseudocode: "rd = CSRs[csr]; CSRs[csr] = CSRs[csr] & (~rs1)",
    description: "Atomic Read and Clear of CSR Bits",
    type: "I",
    arch_width: [32, 64],
    extension: "Zicsr",
    fields: {
      opcode: { value: 0b1110011, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      csr: { mask: 0b111111111111 << 20 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  csrrwi: {
    ISA: "RV",
    assembly: ["uimm", "rd", "csr"],
    pseudocode: "rd = CSRs[csr]; CSRs[csr] = uimm",
    description: "Atomic Read and Write of CSR with Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "Zicsr",
    fields: {
      opcode: { value: 0b1110011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      csr: { mask: 0b111111111111 << 20 },
      uimm: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  csrrsi: {
    ISA: "RV",
    assembly: ["uimm", "rd", "csr"],
    pseudocode: "rd = CSRs[csr]; CSRs[csr] = CSRs[csr] | uimm",
    description: "Atomic Read and Set of CSR Bits with Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "Zicsr",
    fields: {
      opcode: { value: 0b1110011, mask: 0b1111111 },
      funct3: { value: 0b110, mask: 0b111 << 12 },
      csr: { mask: 0b111111111111 << 20 },
      uimm: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  csrrci: {
    ISA: "RV",
    assembly: ["uimm", "rd", "csr"],
    pseudocode: "rd = CSRs[csr]; CSRs[csr] = CSRs[csr] & (~uimm)",
    description: "Atomic Read and Clear of CSR Bits with Immediate",
    type: "I",
    arch_width: [32, 64],
    extension: "Zicsr",
    fields: {
      opcode: { value: 0b1110011, mask: 0b1111111 },
      funct3: { value: 0b111, mask: 0b111 << 12 },
      csr: { mask: 0b111111111111 << 20 },
      uimm: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  //RV32M Standard Extension
  mul: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 * rs2",
    description: "Multiply",
    type: "R",
    arch_width: [32, 64],
    extension: "M",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  mulh: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = (rs1 * rs2) >> XLEN",
    description: "Multiply High",
    type: "R",
    arch_width: [32, 64],
    extension: "M",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b001, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  mulhsu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = (rs1 * rs2) >> XLEN",
    description: "Multiply High Signed Unsigned",
    type: "R",
    arch_width: [32, 64],
    extension: "M",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  mulhu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = (rs1 * rs2) >> XLEN",
    description: "Multiply High Unsigned",
    type: "R",
    arch_width: [32, 64],
    extension: "M",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  div: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 / rs2",
    description: "Divide",
    type: "R",
    arch_width: [32, 64],
    extension: "M",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b100, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  divu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 / rs2",
    description: "Divide Unsigned",
    type: "R",
    arch_width: [32, 64],
    extension: "M",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  rem: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 % rs2",
    description: "Remainder",
    type: "R",
    arch_width: [32, 64],
    extension: "M",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b110, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  remu: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = rs1 % rs2",
    description: "Remainder Unsigned",
    type: "R",
    arch_width: [32, 64],
    extension: "M",
    fields: {
      opcode: { value: 0b0110011, mask: 0b1111111 },
      funct3: { value: 0b111, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  // RV64M Standard Extension (in addition to RV32M)
  mulw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode:
      "rd = rs1 * rs2 (signed 64x64-bit multiplication, result stored in 64-bit rd)",
    description: "Multiply Word",
    type: "R",
    arch_width: [64],
    extension: "M",
    fields: {
      opcode: { value: 0b0111011, mask: 0b1111111 },
      funct3: { value: 0b000, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  divw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode:
      "rd = rs1 / rs2 (signed 64/64-bit division, quotient stored in 64-bit rd)",
    description: "Divide Word",
    type: "R",
    arch_width: [64],
    extension: "M",
    fields: {
      opcode: { value: 0b0111011, mask: 0b1111111 },
      funct3: { value: 0b100, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  divuw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode:
      "rd = rs1 / rs2 (unsigned 64/64-bit division, quotient stored in 64-bit rd)",
    description: "Divide Unsigned Word",
    type: "R",
    arch_width: [64],
    extension: "M",
    fields: {
      opcode: { value: 0b0111011, mask: 0b1111111 },
      funct3: { value: 0b101, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  remw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode:
      "rd = rs1 % rs2 (signed 64/64-bit remainder, result stored in 64-bit rd)",
    description: "Remainder Word",
    type: "R",
    arch_width: [64],
    extension: "M",
    fields: {
      opcode: { value: 0b0111011, mask: 0b1111111 },
      funct3: { value: 0b110, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  remuw: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode:
      "rd = rs1 % rs2 (unsigned 64/64-bit remainder, result stored in 64-bit rd)",
    description: "Remainder Unsigned Word",
    type: "R",
    arch_width: [64],
    extension: "M",
    fields: {
      opcode: { value: 0b0111011, mask: 0b1111111 },
      funct3: { value: 0b111, mask: 0b111 << 12 },
      funct7: { value: 0b0000001, mask: 0b1111111 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  // RV32A Standard Extension
  lr_w: {
    ISA: "RV",
    assembly: ["rd", "rs1", "aq", "rl"],
    pseudocode: "rd = M[rs1]; if aq then aq = 0; if rl then rl = 0;",
    description: "Load Reserved (Word)",
    type: "R",
    arch_width: [32, 64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct5: { value: 0b00010, mask: 0b11111 << 27 },
      rs2: { value: 0b00000, mask: 0b11111 << 20 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sc_w: {
    ISA: "RV",
    assembly: ["rd", "rs1", "aq", "rl", "rs2"],
    pseudocode:
      "rd = M[rs1]; if aq then aq = 0; if rl then rl = 0; if successful SC, rd = 0; else rd = 1;",
    description: "Store Conditional (Word)",
    type: "R",
    arch_width: [32, 64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct5: { value: 0b00011, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amoswap_w: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode:
      "rd = M[rs1]; if aq then aq = 0; if rl then rl = 0; M[rs1] = rs2;",
    description: "Atomic Swap (Word)",
    type: "R",
    arch_width: [32, 64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct5: { value: 0b00001, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amoadd_w: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = rd + rs2;",
    description: "Atomic Add Word",
    type: "R",
    arch_width: [32, 64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct5: { value: 0b00000, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amoxor_w: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = rd ^ rs2;",
    description: "Atomic XOR Word",
    type: "R",
    arch_width: [32, 64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct5: { value: 0b00100, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amoand_w: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = rd & rs2;",
    description: "Atomic AND Word",
    type: "R",
    arch_width: [32, 64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct5: { value: 0b01100, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amoor_w: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = rd | rs2;",
    description: "Atomic OR Word",
    type: "R",
    arch_width: [32, 64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct5: { value: 0b01000, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amomin_w: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = min(rd, rs2);",
    description: "Atomic Minimum Word",
    type: "R",
    arch_width: [32, 64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct5: { value: 0b10000, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amomax_w: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = max(rd, rs2);",
    description: "Atomic Maximum Word",
    type: "R",
    arch_width: [32, 64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct5: { value: 0b10100, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amominu_w: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = minu(rd, rs2);",
    description: "Atomic Minimum Unsigned Word",
    type: "R",
    arch_width: [32, 64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct5: { value: 0b11000, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amomaxu_w: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = maxu(rd, rs2);",
    description: "Atomic Maximum Unsigned Word",
    type: "R",
    arch_width: [32, 64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b010, mask: 0b111 << 12 },
      funct5: { value: 0b11100, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  // RV64A Standard Extension (in addition to RV32A)
  lr_d: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1];",
    description: "Load Reserved Doubleword",
    type: "R",
    arch_width: [64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct5: { value: 0b00010, mask: 0b11111 << 27 },
      rs2: { value: 0b00000, mask: 0b11111 << 20 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  sc_d: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode:
      "if (Memory[rs1] == rd) { Memory[rs1] = rs2; rd = 1; } else rd = 0;",
    description: "Store Conditional Doubleword",
    type: "R",
    arch_width: [64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct5: { value: 0b00011, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amoswap_d: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = rs2;",
    description: "Atomic Swap Doubleword",
    type: "R",
    arch_width: [64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct5: { value: 0b00001, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amoadd_d: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = rd + rs2;",
    description: "Atomic Add Double",
    type: "R",
    arch_width: [64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct5: { value: 0b00001, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amoxor_d: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = rd ^ rs2;",
    description: "Atomic XOR Double",
    type: "R",
    arch_width: [64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct5: { value: 0b00100, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amoand_d: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = rd & rs2;",
    description: "Atomic AND Double",
    type: "R",
    arch_width: [64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct5: { value: 0b01100, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amoor_d: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = rd | rs2;",
    description: "Atomic OR Double",
    type: "R",
    arch_width: [64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct5: { value: 0b01000, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amomin_d: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = min(rd, rs2);",
    description: "Atomic Minimum Double",
    type: "R",
    arch_width: [64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct5: { value: 0b10000, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amomax_d: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = max(rd, rs2);",
    description: "Atomic Maximum Double",
    type: "R",
    arch_width: [64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct5: { value: 0b10100, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amominu_d: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = min(rd, rs2);",
    description: "Atomic Minimum Unsigned Double",
    type: "R",
    arch_width: [64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct5: { value: 0b11000, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
  amomaxu_d: {
    ISA: "RV",
    assembly: ["rd", "rs1", "rs2"],
    pseudocode: "rd = Memory[rs1]; Memory[rs1] = max(rd, rs2);",
    description: "Atomic Maximum Unsigned Double",
    type: "R",
    arch_width: [64],
    extension: "A",
    fields: {
      opcode: { value: 0b0101111, mask: 0b1111111 },
      funct3: { value: 0b011, mask: 0b111 << 12 },
      funct5: { value: 0b11100, mask: 0b11111 << 27 },
      aq: { mask: 0b1 << 26 },
      rl: { mask: 0b1 << 25 },
      rs1: { mask: 0b11111 << 15 },
      rs2: { mask: 0b11111 << 20 },
      rd: { mask: 0b11111 << 7 },
    },
  },
};

// Done: RV[32/64]I+M+Zifencei+Zicsr
// TO-DO: RV[32/64]A+F+D+Q
